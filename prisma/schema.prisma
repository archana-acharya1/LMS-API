// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TransactionType {
  Borrow
  Return
} 
 model User{
  @@map("users")
  id Int  @id  @default(autoincrement())
  name String
  password String
  email String @unique @db.VarChar(191)
  phone String @unique @db.VarChar(15)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  members Member[]
 }

  model Book{
    @@map("books")
     id Int @id @default(autoincrement())
     title String
     author String
     publisher String
     published_date DateTime
     total_copies  Int
     available_copies Int @default(1)
     category String
     ISBN Int @unique
     created_at DateTime @default(now())
     updated_at DateTime @default(now())
     transactions Transaction[]
 
  }

  model Member {
    @@map("members")

    id Int @id @default(autoincrement())
    user_id Int
     name String
     phone String @db.VarChar(15)
     email String  @db.VarChar(191)
     address String
     registered_date DateTime
     created_at DateTime @default(now())
     updated_at DateTime @default(now())

     user User @relation(fields: [user_id],references: [id], onDelete: Cascade)
     transactions Transaction[]
  
  }

model Transaction {
  @@map("transactions")
id Int @id @default(autoincrement())
deadline Int
member_id Int 
book_id Int
transaction_type TransactionType
created_at DateTime @default(now())
updated_at DateTime @default(now())

member Member @relation(fields: [member_id],references: [id])
book Book @relation(fields: [book_id], references: [id])

}
